from schnapsen import deck, game
import random
from schnapsen.game import SchnapsenGamePlayEngine
from schnapsen.bots import RandBot, RdeepBot
from scipy.stats import ttest_ind
from scipy.stats import binom_test


# Create bots.
bot1 = RandBot(rand=random.Random(42), name="randbot")
#bot2 = MLPlayingBot(model_location=model_location, name="MLBot")
bot2 = RdeepBot(16, 4, random.Random(42), name = "rdeepbot")

# Variables to keep track of wins
bot1_wins = 0
bot2_wins = 0

def play_tournament(bot1, bot2, repeats):
    '''This function will play a number of games between two bots and keeps track of how much the bots won in their respective variables.
    :param repeats: Number of repeats of games that this function will play.
    '''
    global bot1_wins, bot2_wins #Declare as global to indicate we're modifying the global variables
    engine = SchnapsenGamePlayEngine()
    myrepeats = repeats

    bots = [bot1,bot2]
    n = len(bots)
    wins = {str(bot): 0 for bot in bots}
    matches = [(p1, p2) for p1 in range(n) for p2 in range(n) if p1 < p2]

    totalgames = (n * n - n) / 2 * myrepeats
    playedgames = 0

    print("Playing {} games:".format(int(totalgames)))
    for a, b in matches:
        for r in range(myrepeats):
            if random.choice([True, False]):
                p = [a, b]
            else:
                p = [b, a]

            winner_id, game_points, score = engine.play_game(
                bots[p[0]], bots[p[1]], random.Random(45)
            )

            wins[str(winner_id)] += game_points

            #If bot1 wins, the bot1_wins variables will go up by 1. If bot2 wins, bot2_wins goes up by 1.
            if winner_id == 0:
                bot1_wins += 1
            else:
                bot2_wins += 1

            playedgames += 1
            print(
                "Played {} out of {:.0f} games ({:.0f}%): {} \r".format(
                    playedgames, totalgames, playedgames / float(totalgames) * 100, wins
                    
                )
            )

def calculate_win_percentages(bot1_wins, bot2_wins):
    '''This function converts the number of wins of bot1 and bot2 into percentages.
    These numbers will be returned, but also printed.
    '''
    total_games = bot1_wins + bot2_wins
    bot1_percentage = (bot1_wins / total_games) * 100 if total_games > 0 else 0
    bot2_percentage = (bot2_wins / total_games) * 100 if total_games > 0 else 0
    
    print("Bot1 Win Percentage: {:.2f}%".format(bot1_percentage))
    print("Bot2 Win Percentage: {:.2f}%".format(bot2_percentage))
    
    return bot1_percentage, bot2_percentage
   
   
def binomial_test_wins(bot1_wins, bot2_wins):
    """
    Perform a binomial test to check if the difference in win rates between two bots is statistically significant, using significance level 0.05.

    Parameters:
    - bot1_wins: Number of wins for bot 1
    - bot2_wins: Number of wins for bot 2

    Returns:
    - p_value: Two-tailed p-value
    - significance: True if the difference is statistically significant, False otherwise
    """
    total_games = bot1_wins+bot2_wins #total number of games played by the bots

    # Perform binomial test
    p_value = binom_test([bot1_wins, bot2_wins], n=[total_games], alternative='two-sided')

    # Assuming a significance level of 0.05
    significance = p_value < 0.05

    print("P-Value:", p_value)
    print("Is the difference significant?:", significance)

    return p_value, significance
         
      
      
      
         
         
play_tournament(bot1, bot2, 10)
calculate_win_percentages(bot1_wins, bot2_wins)
binomial_test_wins(bot1_wins, bot2_wins)
#ins_significance_testing(bot1_wins, bot2_wins)

